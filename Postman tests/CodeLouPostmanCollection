{
	"info": {
		"_postman_id": "9e0315d7-3b32-449b-bb9c-5dd48f5ec416",
		"name": "Code Lou Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25531622"
	},
	"item": [
		{
			"name": "MonsterHunterAPI- GET Monster info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct monster name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql('Anjanath');\r",
							"});\r",
							"\r",
							"pm.test(\"Correct species\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.species).to.eql(\"brute wyvern\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct monster type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"large\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mhw-db.com/monsters/23",
					"protocol": "https",
					"host": [
						"mhw-db",
						"com"
					],
					"path": [
						"monsters",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "MonsterHunterAPI All Monsters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mhw-db.com/monsters",
					"protocol": "https",
					"host": [
						"mhw-db",
						"com"
					],
					"path": [
						"monsters"
					]
				}
			},
			"response": []
		},
		{
			"name": "MonsterHunterAPI GET location info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Location Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Ancient Forest\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct zone count\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.zoneCount).to.eql(17);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mhw-db.com/locations/1",
					"protocol": "https",
					"host": [
						"mhw-db",
						"com"
					],
					"path": [
						"locations",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "dummyJSON -  GET all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/products/",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "dummyJSON - Update product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1, \r\n    \"title\": \"iPhone Elite\",\r\n    \"body\": \"iPhone Elite\"\r\n}"
				},
				"url": {
					"raw": "https://dummyjson.com/products/1",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSONPlaceHolder - get posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSONPlaceHolder - create post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 1, \r\n    \"title\": \"Apple\",\r\n    \"body\": \"iPhone 10\"\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSONPlaceHolder - Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"userId\": 1, \r\n    \"title\": \"Apple\",\r\n    \"body\": \"iPhone 10\"\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSONPlaceHolder - Delete",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSONPlaceHolder - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404, Not Found.\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "JSONPlaceHolder - Request/Get String Param",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId=1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}